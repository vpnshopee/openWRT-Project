name: Mi 4A G BETA V1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: Mi4AG-21/feeds.conf.default.lede
  CONFIG_FILE: Mi4AG-21/mi4agigabit.config
  DIY_P1_SH: scripts/OpenWRT/hook-feeds.sh
  DIY_P2_SH: scripts/OpenWRT/lean-openwrt.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Singapore
  FILE_NAME: Mi_4A_Gigabit_V21.02

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Telegram notification
      run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=Firmware ${{ env.FILE_NAME }} starting to compile."

    - name: Checkout Repository
      uses: actions/checkout@main

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load Custom Feeds
      run: |
        if [ -e "$FEEDS_CONF" ]; then
          mv "$FEEDS_CONF" openwrt/feeds.conf.default
        else
          echo "Custom feeds file $FEEDS_CONF not found. Skipping."
        fi
        if [ -e "$DIY_P1_SH" ]; then
          chmod +x "$DIY_P1_SH"
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
        else
          echo "Script $DIY_P1_SH not found. Skipping."
        fi

    - name: Debug Scripts Directory
      run: |
        echo "Inspecting scripts directory:"
        ls -l $GITHUB_WORKSPACE/scripts || echo "Scripts directory does not exist or is empty."

    - name: Update Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Copy Init Settings
      run: |
        cd openwrt
        if [ -e "$GITHUB_WORKSPACE/scripts/init-settings.sh" ]; then
          mkdir -p files/etc/uci-defaults/
          cp "$GITHUB_WORKSPACE/scripts/init-settings.sh" files/etc/uci-defaults/99-init-settings
        else
          echo "init-settings.sh not found. Skipping."
        fi

    - name: Compile the Firmware
      id: compile
      run: |
        cd openwrt
        echo "Starting compilation with $(nproc) threads."
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: Debug Build Output
      run: |
        echo "Inspecting openwrt/bin directory:"
        ls -l openwrt/bin || echo "Directory openwrt/bin does not exist."
        echo "Inspecting openwrt/bin/targets directory:"
        ls -l openwrt/bin/targets || echo "Directory openwrt/bin/targets does not exist."

    - name: Organize Files
      run: |
        if [ -d "openwrt/bin/targets" ]; then
          cd openwrt/bin/targets/*/*
          rm -rf packages
        else
          echo "No build output found in openwrt/bin/targets."
          exit 1
        fi

    - name: Upload Firmware Directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.FILE_NAME }}
        path: openwrt/bin/targets/*/*

    - name: Telegram Firmware Done Notification
      if: steps.compile.outputs.status == 'success'
      run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=Congratulations! Firmware ${{ env.FILE_NAME }} successfully uploaded."
